const puppeteer = require("puppeteer");
const axios = require("axios");
const randomUseragent = require("random-useragent");

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö HTTP –ø—Ä–æ–∫—Å–∏
async function getFreeProxies() {
  try {
    const response = await axios.get(
      "https://www.proxy-list.download/api/v1/get?type=http"
    );
    return response.data.split("\r\n").filter(Boolean);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏:", error.message);
    return [];
  }
}

// –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏ –∏ —Å–ª—É—á–∞–π–Ω—ã–º User-Agent
async function launchWithProxy(proxy) {
  const userAgent = randomUseragent.getRandom();
  console.log(`üü° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: ${proxy}, UA: ${userAgent}`);

  const browser = await puppeteer.launch({
    headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞, –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å true –¥–ª—è headless
    args: [
      `--proxy-server=http://${proxy}`,
      "--no-sandbox",
      "--disable-setuid-sandbox",
    ],
  });

  const page = await browser.newPage();

  // –û—á–∏—Å—Ç–∏–º cookies –∏ localStorage –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ "–Ω–æ–≤–æ–≥–æ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const client = await page.target().createCDPSession();
  await client.send("Network.clearBrowserCookies");
  await client.send("Storage.clearDataForOrigin", {
    origin: "*",
    storageTypes: "all",
  });

  try {
    await page.setUserAgent(userAgent);
    // –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä)
    await page.goto(
      "https://www.avito.ru/moskva/avtomobili/bmw_3_seriya_2.0_at_2013_121_000_km_7377748476",
      {
        waitUntil: "networkidle2",
        timeout: 15000,
      }
    );

    const content = await page.content();
    console.log(`üü¢ –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥. –û—Ç–≤–µ—Ç: ${content.slice(0, 200)}...`);

    // –ñ–¥—ë–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–π
    try {
      await page.waitForSelector(
        'button[data-marker="item-phone-button/card"]',
        {
          timeout: 5000,
        }
      );
      await page.click('button[data-marker="item-phone-button/card"]');
      console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"');
    } catch (e) {
      console.log("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
  } catch (error) {
    console.error("üî¥ –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞:", error.message);
  } finally {
    await browser.close();
  }
}

async function testProxy(proxy) {
  try {
    const res = await axios.get("https://httpbin.org/ip", {
      proxy: {
        host: proxy.split(":")[0],
        port: parseInt(proxy.split(":")[1]),
      },
      timeout: 5000,
    });
    console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—á–∏–π: ${proxy}`);
    return true;
  } catch (err) {
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
(async () => {
  const proxies = await getFreeProxies();
  if (proxies.length === 0) {
    console.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.");
    return;
  }

  // –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ 5 —Ç–µ—Å—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–∞–Ω–∏–ª–∏
  const testCount = 2;
  let tested = 0;
  for (let i = 0; i < proxies.length && tested < testCount; i++) {
    const proxy = proxies[i];
    const isWorking = await testProxy(proxy);
    if (isWorking) {
      await launchWithProxy(proxy);
      tested++;
    }
  }
})();
